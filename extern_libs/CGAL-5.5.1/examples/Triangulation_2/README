triangulation_prog1:
The following program creates a triangulation of 2D points using 
a default kernel of CGAL  as geometric traits and the
default instantiation of the triangulation data structure template
parameter.
 The input points are read from a file and inserted in the
triangulation.  Finally points on the convex hull are written to {\tt
cout}.

colored_face
Illustrates how the user can have some additional property
like e.g. a color stored in the faces or vertices
of the triangulation.

adding_handles
Illustrates how the user can derive and plug in his own vertex_base 
or face_base when he would like to have  additional
handles to other faces and vertices stored in the faces or vertices.


voronoi:
Builds a Delaunay triangulation from input points in a file
and takes the dual Voronoi diagram

terrain
Build a terrain using a Delaunay triangulation with the traits class for 
terrains.

regular
Build a regular triangulation

constrained
input a grid of 5x5 constraints into a constrained Delaunay triangulation
supporting intersecting constraints and count the number
of constrained edges in the resulting triangulation.

constrained_plus
Same has above, but the  constrained Delaunay triangulation
uses an exact number types and a constraint hierarchy.

hierarchy
A standard use of a  triangulation hierarchy
to enhance the efficiency
of a Delaunay triangulation.
The program outputs the number of vertices
at the different levels of the hierarchy

constrained_hierarchy_plus
The program shows how to use
a triangulation hierarchy in conjunction with a Constrained 
triangulation plus.

info_insert_with_pair_iterator_2
info_insert_with_pair_iterator_regular_2
info_insert_with_zip_iterator_2
info_insert_with_transform_iterator_2
Show how to insert points and info using the insert by range function
with different methods.

